WHITESPACE = _{ " " | "\t" | new_line }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
new_line = @{ !"\\" ~ ( "\r"? ~ "\n" ) }

// https://github.com/kropp/intellij-qml/blob/master/grammars/qml.bnf

qml = { SOI ~ pragma? ~ import* ~ object ~ EOI }

pragma = { "pragma" ~ "Singleton" }
import = { "import" ~ (module ~ version? | filename) ~ ("as" ~ qualifier)? }
version = { float } // version_major "." version_minor actually
module = { identifier }
qualifier = { identifier }
filename = { string }

line_comment = _{ "//" ~ ( !new_line ~ ANY* ) }
// block_comment = {}

object = { type_name ~ body }
body = { "{" ~ ( property_definition | signal_definition | attribute_assignment | method_attribute )* ~ "}" }
type_name = { "double" | "real" | identifier }

attribute_assignment = { (attribute ~ ":")? ~ attribute_value ~ ";"? }
item = { list | object | string | boolean | number | identifier | value }
attribute_value = { method_call | method_body | item | value+ }

property_definition = { "default"? ~ "readonly"? ~ "property" ~ ("alias" | "var" | type_name) ~ property ~ (":" ~ attribute_value)? }
signal_definition = { "signal" ~ signal ~ ("(" ~ (signal_parameter ~ ",")* ~ signal_parameter? ~ ")")? }
signal_parameter = { ("var" | type_name) ~ parameter }

method_attribute = { "function" ~ method ~ "(" ~ (parameter ~ ",")* ~ parameter? ~ ")" ~ method_body }

method_call = { method ~ "(" ~ (argument ~ ",")* ~ argument? ~ ")" }

method_body = { "{" ~ javascript ~ "}" }
javascript = { ("{" ~ javascript ~ "}" | "var" | "[" | "]" | "(" | ")" | "," | ":" | ";" | string | identifier | number | value)* }

list = { "[" ~ item? ~ ("," ~ item)* ~ "]" }

property = { identifier }
attribute = { identifier }
signal = { identifier }
parameter = { identifier }
method = { identifier }
argument = { string | boolean | number | identifier | value }

number = { integer | float }
boolean = { "true" | "false" }

// ---
string = ${ "\"" ~ string_content ~ "\"" }
string_content = @{ !"\"" ~ ALPHABETIC* }
integer = @{ ASCII_DIGIT+ }
float = ${ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
identifier = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }
value = { string | number }
